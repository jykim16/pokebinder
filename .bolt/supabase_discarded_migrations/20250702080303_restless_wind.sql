/*
  # Create price_update_logs table

  1. New Tables
    - `price_update_logs`
      - `id` (integer, primary key, auto-increment)
      - `updated_cards` (integer, default 0) - Number of cards updated in this run
      - `error_count` (integer, default 0) - Number of errors encountered
      - `update_timestamp` (timestamptz, default now()) - When the update occurred
      - `status` (text, default 'pending') - Status of the update (pending, success, partial_success, failed)
      - `error_details` (text, nullable) - Details about any errors
      - `created_at` (timestamptz, default now()) - When the log entry was created

  2. Security
    - Enable RLS on `price_update_logs` table
    - Add policy for authenticated users to read logs
    - Add policy for service role to manage logs (full access)

  3. Indexes
    - Index on status for filtering
    - Index on update_timestamp for ordering

  4. Constraints
    - Check constraint on status to ensure valid values
*/

-- Create the price_update_logs table
CREATE TABLE IF NOT EXISTS price_update_logs (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  updated_cards integer DEFAULT 0,
  error_count integer DEFAULT 0,
  update_timestamp timestamptz DEFAULT now(),
  status text DEFAULT 'pending'::text,
  error_details text,
  created_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE price_update_logs ENABLE ROW LEVEL SECURITY;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_price_update_logs_status ON price_update_logs USING btree (status);
CREATE INDEX IF NOT EXISTS idx_price_update_logs_timestamp ON price_update_logs USING btree (update_timestamp);

-- Add constraint to ensure valid status values
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'price_update_logs' 
    AND constraint_name = 'price_update_logs_status_check'
  ) THEN
    ALTER TABLE price_update_logs 
    ADD CONSTRAINT price_update_logs_status_check 
    CHECK (status = ANY (ARRAY['pending'::text, 'success'::text, 'partial_success'::text, 'failed'::text]));
  END IF;
END $$;

-- Create RLS policies
CREATE POLICY "Authenticated users can read price update logs"
  ON price_update_logs
  FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Service role can manage price update logs"
  ON price_update_logs
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);